// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id 
  username String    @unique
  password_hash String
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String?
  address     String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  createdAt   DateTime @default(now())
  orders      Order[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  stockQuantity   Int
  categoryId      Int?
  category        Category?   @relation(fields: [categoryId], references: [id])
  createdAt       DateTime    @default(now())
  orderItems      OrderItem[]
  productActive   Boolean     @default(false)
  productArchived Boolean     @default(false)
  images          Image[]
  coverIndex      Int?
  sku             String?     @unique
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          Int         @id @default(autoincrement())
  customerId  Int
  orderDate   DateTime    @default(now())
  status      String      @default("Pending")
  totalAmount Float
  customer    Customer    @relation(fields: [customerId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
